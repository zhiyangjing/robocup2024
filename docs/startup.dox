/*!

\~english
\page startup Start Up

\~chinese
\page startup 开始开发

在开始编写代码前，请稍微花一点时间阅读以下的约定和帮助，这将有助于你更加顺利地参与到 SmartCar 的开发中。

\section standard 项目规范

开发过程中，除实现功能外，也请关注命名、注释（文档）、提交规范这三方面。

- 命名
  - 禁止用拼音命名，可以用 [CodeIf](https://unbug.github.io/codelf) 这个工具来查找合适的变量名，实在不方便翻译成英文的直接用中文。
  - 文件名只能是英文，所有文件一律使用 UTF-8 编码，禁止使用任何其他编码。
  - 类型名称（类、枚举、结构体等）遵循大驼峰，例如 `ArrayBuffer` 代表 array buffer 类型。
  - 变量、函数名称用通常小写、下划线隔开，例如 `extract_vector3f` 代表 extract vector3f 这个过程；如果某个单词是缩写，那么这个单词大写。
  - 宏一般用全大写命名。

- 注释：在写完代码后，请尽量注释你认为其他人不能一眼看懂的类、函数。函数内部关于实现思路的注释没有任何格式规定，而 Doxygen 注释块请遵循这两条：
  - 对类和函数的注释应该是 Qt 风格的 Doxygen 注释块。每处英文注释开头请加上 `\~english` 指令、中文注释开头请加上 `\~chinese` 命令，否则 Doxygen 生成对应语言的文档时内容会不匹配。
  - 如果时间紧张，可以仅写中文注释；但除非功能特别简单，还请务必写上注释，哪怕只是一个 `\brief`。

- 提交规范
  - 必须包含有意义的提交说明，不能什么都不写或者只写个 update on yyyy-mm-dd 这样无意义的句子。
  - 如果某次本地提交之后发现还需要修改一些细节内容，请尽量将没有特殊意义的修改与之前的提交合并，避免“改正了某个单词拼写”或“多加了一层大括号”成为一次单独的提交。
  - 提交说明最重要的目的是说清楚做了什么，如果觉得英语说不清，完全可以用中文写提交说明。

另外，如果你想要拓展之前已有的功能或算法，请慎重考虑是否将现有的代码完全删掉再重写。如果考虑后认为确实需要完全重写，请注意尽量维持与原先相似的日志输出，为其他成员维护、调试提供足够的信息。

\section commit 提交更改

1. 将仓库克隆到本地，新建一个分支：
   ```bash
   $ git clone https://github.com/zhiyangjing/robocup2024 
   $ cd robocup2024
   ```
2. add 与 commit
   ```bash
   $ git add .
   $ git commit -m [message]
   ```

- 新建自己的分支，请勿直接在 `main` 分支上修改代码。
- 通常情况下请不要使用 revert 回退，任何情况下禁止修改一个已经被推送到远程仓库的 commit、禁止使用 `git push -f` (`git push --force`) 强制覆盖远程仓库。如果需要修正已经推送的错误，请新建一个提交。
- 通常不要使用 `merge` 命令，如果遇到严重冲突不知道该怎么解决，请与其他人讨论。
- 在推送到远程仓库前，保证自己已经 rebase 到了最新的 `main` 分支上。

\section tools 开发工具

\subsection code-format 代码格式

请注意， **所有的源代码文件在提交之前都应当被格式化。**

为了免去写代码时考虑格式的麻烦，我们使用 clang-format 工具格式化 src 目录下的所有代码。指定格式的 .clang-format 文件已经放置于项目根目录下，请勿随意修改。

目前 vim / VS Code / Visual Studio 等开发工具中都有集成 clang-format 的插件，可以直接安装使用；也可以手动在命令行使用

```bash
clang-format -style=file -i file
```

来格式化 `file` 这个文件。

